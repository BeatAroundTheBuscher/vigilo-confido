maxDarknessToSeeUnits: 15
constants:
  damageRange: 20
  explosiveDamageRange: 10
  fireDamageRange: [5, 10]

extended:
  tags:
    BattleUnit:
      CRIT_CHANCE_BASE: int       # never reset during a mission
      CRIT_CHANCE_THIS_TURN: int  # gets reset every turn
      CRIT_CHANCE_NEXT_HIT: int   # gets reset after a hit
      CRIT_DAMAGE_NEXT_HIT: int   # gets reset after a hit
    RuleItem:
      CRIT_CHANCE: int                # base crit chance of item
      CRIT_DAMAGE: int                # crit factor (percent of additional orig damage to health)
  scripts:
    visibilityUnit:
      - offset: -1 # alien exposer
        code: |
          var ptr RuleArmor armor_rule;
          var ptr RuleSoldier soldier_rule;
          
          observer_unit.getRuleSoldier soldier_rule;  

          if neq soldier_rule null;  # we have an xcom unit as observer
            if le distance distance_max;
              set current_visibility 100; # expose enemy unit if in max viewing dist (like the aliens..)
            end;
          end;
          return current_visibility visibility_mode;
    createUnit:
      - offset: -1 # accuracy nerfer
        code: |
          var ptr RuleSoldier soldier_rule;
          var int id;
          var int firing;
          var int adjustment;
          
          set adjustment 90; # 90% accuracy

          unit.getId id;
          unit.getRuleSoldier soldier_rule;  

          if eq soldier_rule null;  # we have an alien unit
            debug_log "Adjusting accuracy of unit" id;
            unit.Stats.getFiring firing;
            debug_log " - from" firing;
            muldiv firing adjustment 100;
            unit.Stats.setFiring firing;
            debug_log " - to" firing;
          end;
          return;
    hitUnit:
      - offset: -1 # power nerfer
        code: |
          var ptr RuleSoldier soldier_rule;
          var int id;
          var int firing;
          var int adjustment;
          
          set adjustment 70; # 70% power

          unit.getId id;
          unit.getRuleSoldier soldier_rule;  

          if neq soldier_rule null;  # we have an xcom unit
            debug_log "Adjusting power of hit against xcom unit" id;
            debug_log " - from" power;
            muldiv power adjustment 100;
            debug_log " - to" power;
          end;
          return power part side;
    newTurnUnit:
      - offset: 98 # critical hits
        code: |
          unit.setTag Tag.CRIT_CHANCE_THIS_TURN 0; # reset crit chance this turn
          return;
    hitUnit:
      - offset: 98 # critical hits (balancing for lower damageRange)
        code: |
          var ptr RuleItem item_rule;
          var int crit_chance;
          var int unit_chance;
          var int unit_factor;
          var int crit_factor;  # 100 = 100% additional damage of original power
          var int crit_damage;
          var int original_power;

          weapon_item.getRuleItem item_rule;

          attacker.getTag unit_chance Tag.CRIT_CHANCE_BASE;
          add crit_chance unit_chance;

          attacker.getTag unit_chance Tag.CRIT_CHANCE_THIS_TURN;
          add crit_chance unit_chance;

          attacker.getTag unit_chance Tag.CRIT_CHANCE_NEXT_HIT;
          add crit_chance unit_chance;
          attacker.setTag Tag.CRIT_CHANCE_NEXT_HIT 0;

          item_rule.getTag unit_chance Tag.CRIT_CHANCE;
          add crit_chance unit_chance;

          attacker.getTag unit_factor Tag.CRIT_DAMAGE_NEXT_HIT;
          add crit_factor unit_factor;
          attacker.setTag Tag.CRIT_DAMAGE_NEXT_HIT 0;

          item_rule.getTag unit_factor Tag.CRIT_DAMAGE;
          add crit_factor unit_factor;

          if eq crit_chance 0;
            set crit_chance 5;  # base chance of 5% for everybody
          end;

          if eq crit_factor 0;
            set crit_factor 40; # 40% additional damage as baseline for everybody on crit
          end;
          
          debug_log "Crit check:" crit_chance crit_factor;

          battle_game.randomChance crit_chance; # will set crit_chance to 1 on success
          if gt crit_chance 0;
            set original_power power;
            set crit_damage orig_power;
            muldiv crit_damage crit_factor 100;
            add power crit_damage;
            debug_log "CRITICAL HIT (old/new):" original_power power;
          end;
          return power part side;