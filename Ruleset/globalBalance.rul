 
displayCustomCategories: 2
customTrainingFactor: 10
maxDarknessToSeeUnits: 15

constants:
  damageRange: 20
  explosiveDamageRange: 10
  fireDamageRange: [10, 20]
  extendedRunningCost: true

difficultyCoefficient: [0, 1, 2, 3, 4]
defeatFunds: -10000
defeatScore: -20000
aimAndArmorMultipliers: [1.0, 1.0, 1.0, 1.0, 1.0]

statGrowthMultipliers:
  tu: 4
  stamina: 4
  health: 0
  bravery: 0
  reactions: 6
  firing: 6
  throwing: 0
  strength: 2
  psiStrength: 4
  psiSkill: 4
  melee: 4

bughuntMinTurn: 16
bughuntMaxEnemies: 2
bughuntRank: -1
surrenderMode: 2

ai:
  useDelayBlaster: 3
  useDelayFirearm: 2
  useDelayGrenade: 2
  useDelayMelee: 1
  useDelayPsionic: 4

extended:
  scripts:
    visibilityUnit:
      - offset: -1 # alien exposer
        code: |
          var ptr RuleArmor armor_rule;
          var ptr RuleSoldier soldier_rule;
          
          observer_unit.getRuleSoldier soldier_rule;  

          if neq soldier_rule null;  # we have an xcom unit as observer
            if le distance distance_max;
              set current_visibility 100; # expose enemy unit if in max viewing dist (like the aliens..)
            end;
          end;
          return current_visibility visibility_mode;
    newTurnUnit:
      - offset: -1 # reaction accuracy adjuster
        code: |
          var ptr RuleSoldier soldier_rule;
          var int adjustment;
          var int turn_side;
          var int old_bonus;
          var int org_acc;
          var int new_acc;
          var int unit_faction;

          set adjustment 100; # 50% accuracy on reaction shots

          unit.getFaction unit_faction;

          battle_game.getTurnSide turn_side;
          unit.getRuleSoldier soldier_rule;
          unit.getTag org_acc Tag.ORIGINAL_ACCURACY;

          if eq unit_faction 1; # aliens only
            if and eq turn_side 0 neq adjustment 100; # reaction shots
              unit.Stats.getFiring org_acc;
              unit.setTag Tag.ORIGINAL_ACCURACY org_acc;
              set new_acc org_acc;
              muldiv new_acc adjustment 100;
              unit.Stats.setFiring new_acc;
              debug_log "Reaction accuracy adjustment from" org_acc "to" new_acc "for" unit;
            else and eq turn_side 1 gt org_acc 0;
              unit.Stats.setFiring org_acc;
              unit.setTag Tag.ORIGINAL_ACCURACY 0;
              debug_log "Accuracy restored to" org_acc "for" unit;
            end;
          end;
          return;
      - offset: 98 # critical hits
        code: |
          unit.setTag Tag.CRIT_CHANCE_THIS_TURN 0; # reset crit chance this turn
          return;
    createUnit:
      - offset: -1 # global accuracy adjuster
        code: |
          var ptr RuleSoldier soldier_rule;
          var int id;
          var int firing;
          var int adjustment;
          
          set adjustment 100; # 100% accuracy

          unit.getId id;
          unit.getRuleSoldier soldier_rule;  

          if and neq adjustment 100 eq soldier_rule null;  # we have an alien unit
            debug_log "Adjusting accuracy of unit" id;
            unit.Stats.getFiring firing;
            debug_log " - from" firing;
            muldiv firing adjustment 100;
            unit.Stats.setFiring firing;
            debug_log " - to" firing;
          end;
          return;
    hitUnit:
      - offset: -1 # power adjuster
        code: |
          var ptr RuleSoldier soldier_rule;
          var int id;
          var int firing;
          var int adjustment;
          
          set adjustment 100; # 100% power

          unit.getId id;
          unit.getRuleSoldier soldier_rule;  

          if and neq adjustment 100 neq soldier_rule null;  # we have an xcom unit
            debug_log "Adjusting power of hit against xcom unit" id;
            debug_log " - from" power;
            muldiv power adjustment 100;
            debug_log " - to" power;
          end;
          return power part side;
      - offset: 98 # critical hits
        code: |
          var ptr RuleItem item_rule;
          var int crit_chance;
          var int unit_chance;
          var int unit_factor;
          var int crit_factor;  # 100 = 100% additional damage of original power
          var int crit_damage;
          var int original_power;
          var int hardened;

          set crit_factor 40; # 40% additional damage as baseline for everybody on crit
          
          weapon_item.getRuleItem item_rule; # weapon
          
          item_rule.getTag unit_chance Tag.CRIT_CHANCE;
          add crit_chance unit_chance;

          item_rule.getTag unit_factor Tag.CRIT_DAMAGE;
          add crit_factor unit_factor;

          if neq damaging_item weapon_item;
            # weapon has ammo
            damaging_item.getRuleItem item_rule; # ammo

            item_rule.getTag unit_chance Tag.CRIT_CHANCE;
            add crit_chance unit_chance;

            item_rule.getTag unit_factor Tag.CRIT_DAMAGE;
            add crit_factor unit_factor;
          end;

          attacker.getTag unit_chance Tag.CRIT_CHANCE_BASE;
          add crit_chance unit_chance;

          attacker.getTag unit_chance Tag.CRIT_CHANCE_THIS_TURN;
          add crit_chance unit_chance;

          attacker.getTag unit_chance Tag.CRIT_CHANCE_NEXT_HIT;
          add crit_chance unit_chance;
          attacker.setTag Tag.CRIT_CHANCE_NEXT_HIT 0;

          attacker.getTag unit_factor Tag.CRIT_DAMAGE_NEXT_HIT;
          add crit_factor unit_factor;
          attacker.setTag Tag.CRIT_DAMAGE_NEXT_HIT 0;

          if eq crit_chance 0;
            set crit_chance 5;  # base chance of 5% for everybody
          end;

          debug_log "Crit check:" crit_chance crit_factor;

          unit.getTag hardened Tag.HARDENED_STATE;
          if gt hardened 0;
            sub crit_chance 60;
            if lt crit_chance 0;
              set crit_chance 0;
            end;
          end;
          battle_game.randomChance crit_chance; # will set crit_chance to 1 on success
          if gt crit_chance 0;
            set original_power power;
            set crit_damage power;
            muldiv crit_damage crit_factor 100;
            add power crit_damage;
            debug_log "CRITICAL HIT (old/new):" original_power power;
            unit.setTag Tag.LAST_DAMAGE_TYPE 1; # crititcal hit
          else;
            unit.setTag Tag.LAST_DAMAGE_TYPE 0;
          end;
          return power part side;
    damageUnit:
      - offset: 97
        code: |
          var int wounds;
          unit.getFatalwounds wounds part;
          if gt wounds 0;
            set to_wound 0; # only ever inflict one fatal wound per body part
          end;
          return;
      - offset: 99
        code: |
          var int temp;
          var int type;
          var int showHealthLeft;
          var int healthLeft;
          var int informationLevel; # 0 = None, 1 = Only Damage, 2 = Damage + HP Left

          battle_game.getTag informationLevel Tag.COMBAT_INFORMATION_LEVEL;

          if eq informationLevel 0;
            return;
          else eq informationLevel 1;
            set showHealthLeft 0;
          else eq informationLevel 2;
            set showHealthLeft 1;
          end;

          if gt to_health 0;
            unit.getHealth healthLeft;
            sub healthLeft to_health;
            unit.getTag type Tag.LAST_DAMAGE_TYPE;
            battle_game.getAnimFrame temp;
            if gt showHealthLeft 0;
              if gt to_armor 0;
                if eq type 1;
                  battle_game.flashMessage "STR_CRIT_DAMAGE_DEALT_SHRED_HP_LEFT" to_health healthLeft to_armor;
                else;
                  battle_game.flashMessage "STR_DAMAGE_DEALT_SHRED_HP_LEFT" to_health healthLeft to_armor;
                end;
              else;
                if eq type 1;
                  battle_game.flashMessage "STR_CRIT_DAMAGE_DEALT_HP_LEFT" to_health healthLeft;
                else;
                  battle_game.flashMessage "STR_DAMAGE_DEALT_HP_LEFT" to_health healthLeft;
                end;
              end;
            else;
              if gt to_armor 0;
                if eq type 1;
                  battle_game.flashMessage "STR_CRIT_DAMAGE_DEALT_SHRED" to_health to_armor;
                else;
                  battle_game.flashMessage "STR_DAMAGE_DEALT_SHRED" to_health to_armor;
                end;
              else;
                if eq type 1;
                  battle_game.flashMessage "STR_CRIT_DAMAGE_DEALT" to_health;
                else;
                  battle_game.flashMessage "STR_DAMAGE_DEALT" to_health;
                end;
              end;
            end;
            unit.setTag Tag.LAST_DAMAGE_FRAME temp;
          else gt to_stun 0;
            unit.setTag Tag.LAST_DAMAGE_TYPE 2;
            battle_game.getAnimFrame temp;
            unit.setTag Tag.LAST_DAMAGE_FRAME temp;
          end;
          return;
    recolorUnitSprite:
      - offset: 99
        code: |
          var int temp;
          var int type;
          var int color;    
          unit.getTag temp Tag.LAST_DAMAGE_FRAME;
          unit.getTag type Tag.LAST_DAMAGE_TYPE;
          if neq temp 0;
            sub temp anim_frame;
            if gt temp -5; #only 5 frames after hit have changed color
              set color COLOR_X1_RED;
              if eq type 1;
                set color COLOR_X1_YELLOW;
              else eq type 2;
                set color COLOR_X1_SPECIAL;
              end;
              set_color new_pixel color;
            end;
          end;          
          return new_pixel;

extraStrings:
  - type: en-US
    strings: 
      STR_DAMAGE_DEALT_SHRED: "Hit: {0} - Shred: {1}"
      STR_CRIT_DAMAGE_DEALT_SHRED: "CRIT: {0} - Shred: {1}"
      STR_DAMAGE_DEALT: "Hit: {0}"
      STR_CRIT_DAMAGE_DEALT: "CRIT: {0}"
      STR_DAMAGE_DEALT_SHRED_HP_LEFT: "Hit: {0}>{1} - Shred: {2}"
      STR_CRIT_DAMAGE_DEALT_SHRED_HP_LEFT: "CRIT: {0}>{1} - Shred: {2}"
      STR_DAMAGE_DEALT_HP_LEFT: "Hit: {0}>{1}"
      STR_CRIT_DAMAGE_DEALT_HP_LEFT: "CRIT: {0}>{1}"